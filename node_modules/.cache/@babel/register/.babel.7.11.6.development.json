{
  "{\"sourceRoot\":\"/Users/catherineparnell/api-ivyhacks/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/catherineparnell/api-ivyhacks\",\"filename\":\"/Users/catherineparnell/api-ivyhacks/src/server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/catherineparnell/api-ivyhacks\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/catherineparnell/api-ivyhacks/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/catherineparnell/api-ivyhacks",
      "filename": "/Users/catherineparnell/api-ivyhacks/src/server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/catherineparnell/api-ivyhacks",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/catherineparnell/api-ivyhacks/src/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/catherineparnell/api-ivyhacks/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/catherineparnell/api-ivyhacks/src/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "// import apiRouter from './router';\nconst express = require('express');\n\nconst cors = require('cors');\n\nconst morgan = require('morgan');\n\nconst path = require('path');\n\nconst bodyParser = require('body-parser');\n\nconst dotenv = require('dotenv');\n\ndotenv.config({\n  silent: true\n}); // initialize\n\nconst app = express(); // enable/disable cross origin resource sharing if necessary\n\napp.use(cors()); // enable/disable http request logging\n\napp.use(morgan('dev')); // enable only if you want templating\n\napp.set('view engine', 'ejs'); // enable only if you want static assets from folder static\n\napp.use(express.static('static')); // this just allows us to render ejs from the ../app/views directory\n\napp.set('views', path.join(__dirname, '../src/views')); // enable json message body for posting data to API\n\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json()); // additional init stuff should go before hitting the routing\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\n// this should go AFTER body parser\n// app.use('/api', apiRouter);\n\napp.get('/api/hello-world', async (req, res) => {\n  const docRef = db.collection('tests').doc('alovelace');\n  await docRef.set({\n    first: 'Ada',\n    last: 'Lovelace',\n    born: 1815\n  });\n  return res.status(200).send('Hello World!');\n});\n\nconst PersonalityInsightsV3 = require('ibm-watson/personality-insights/v3');\n\nconst {\n  IamAuthenticator\n} = require('ibm-watson/auth');\n\nconst personalityInsights = new PersonalityInsightsV3({\n  version: '2017-10-13',\n  authenticator: new IamAuthenticator({\n    apikey: process.env.IBMKEY\n  }),\n  serviceUrl: 'https://api.us-east.personality-insights.watson.cloud.ibm.com/instances/e243b357-33f5-45ec-a2e3-a4fdabccd55c'\n});\n\nfunction calculate_similarity(user, candidate, num) {\n  let per = 0;\n\n  for (i = 0; i < num; i++) {\n    per += Math.min(user[i].raw_score, candidate[i].raw_score) / Math.max(user[i].raw_score, candidate[i].raw_score);\n  }\n\n  return per / num;\n}\n\napp.put('/api/text-recommendations/', async (req, res) => {\n  // get user profile from ibm\n  const userProfileParams = {\n    // req.body.userText\n    content: req.body.userText,\n    contentType: 'text/plain;charset=utf-8',\n    consumptionPreferences: true,\n    rawScores: true\n  };\n  let user_profile = await personalityInsights.profile(userProfileParams); // for each election in elections\n  // console.log(req.body.elections);\n\n  const elections = req.body.elections;\n\n  for (election of elections) {\n    // eslint-disable-next-line consistent-return\n    try {\n      let candidate_profiles = []; // try and get candidates' profiles from election\n\n      for (candidate of election.candidates) {\n        let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream — the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\";\n        const candidateProfileParams = {\n          content: candidate_content,\n          contentType: 'text/plain;charset=utf-8',\n          consumptionPreferences: true,\n          rawScores: true\n        };\n        profile = await personalityInsights.profile(candidateProfileParams); // add profile to candidate json\n\n        candidate[\"profile\"] = profile; // add profile to candidate profiles for store in firebase\n\n        candidate_profiles.push(profile); // calculate needs_score and values_score with user_profile\n\n        const needs_score = calculate_similarity(user_profile.result.needs, candidate.profile.result.needs, 12);\n        const values_score = calculate_similarity(user_profile.result.values, candidate.profile.result.values, 5);\n        candidate.profile[\"needs_score\"] = needs_score;\n        candidate.profile[\"values_score\"] = values_score; // take average and add to candidate.profile under \"average_score\"\n\n        candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n      }\n    } catch (error) {\n      console.log(error);\n      return res.status(500).send(error);\n    }\n  } // return elections\n\n\n  return res.status(200).send({\n    elections\n  });\n});\napp.put('/api/slide-recommendations/', async (req, res) => {\n  const user_profile = req.body.user;\n  const elections = req.body.elections;\n\n  for (election of elections) {\n    // eslint-disable-next-line consistent-return                 \n    let candidate_profiles = []; // if candidates' profiles from election not stored in firebase\n\n    try {\n      for (candidate of election.candidates) {\n        let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream — the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\";\n        const candidateProfileParams = {\n          content: candidate_content,\n          contentType: 'text/plain;charset=utf-8',\n          consumptionPreferences: true,\n          rawScores: true\n        };\n        profile = await personalityInsights.profile(candidateProfileParams); // add profile to candidate json\n\n        candidate[\"profile\"] = profile; // add profile to candidate profiles for store in firebase\n\n        candidate_profiles.push(profile); // calculate needs_score and values_score with user_profile\n\n        const needs_score = calculate_similarity(user_profile.needs, candidate.profile.result.needs, 12);\n        const values_score = calculate_similarity(user_profile.values, candidate.profile.result.values, 5);\n        candidate.profile[\"needs_score\"] = needs_score;\n        candidate.profile[\"values_score\"] = values_score; // take average and add to candidate.profile under \"average_score\"\n\n        candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n      }\n    } catch (error) {\n      console.log(error);\n      return res.status(500).send(error);\n    }\n  } // return elections\n\n\n  return res.status(200).send({\n    elections\n  });\n}); // START THE SERVER\n// =============================================================================\n\nconst port = process.env.PORT || 8081;\napp.listen(port);\nconsole.log(`listening on: ${port}`);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "require",
        "cors",
        "morgan",
        "path",
        "bodyParser",
        "dotenv",
        "config",
        "silent",
        "app",
        "use",
        "set",
        "static",
        "join",
        "__dirname",
        "urlencoded",
        "extended",
        "json",
        "get",
        "req",
        "res",
        "docRef",
        "db",
        "collection",
        "doc",
        "first",
        "last",
        "born",
        "status",
        "send",
        "PersonalityInsightsV3",
        "IamAuthenticator",
        "personalityInsights",
        "version",
        "authenticator",
        "apikey",
        "process",
        "env",
        "IBMKEY",
        "serviceUrl",
        "calculate_similarity",
        "user",
        "candidate",
        "num",
        "per",
        "i",
        "Math",
        "min",
        "raw_score",
        "max",
        "put",
        "userProfileParams",
        "content",
        "body",
        "userText",
        "contentType",
        "consumptionPreferences",
        "rawScores",
        "user_profile",
        "profile",
        "elections",
        "election",
        "candidate_profiles",
        "candidates",
        "candidate_content",
        "candidateProfileParams",
        "push",
        "needs_score",
        "result",
        "needs",
        "values_score",
        "values",
        "error",
        "console",
        "log",
        "port",
        "PORT",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/catherineparnell/api-ivyhacks/src/",
      "sourcesContent": [
        "// import apiRouter from './router';\nconst express = require('express');\nconst cors = require('cors');\nconst morgan = require('morgan');\nconst path = require('path');\nconst bodyParser = require('body-parser');\n\nconst dotenv = require('dotenv');\ndotenv.config({ silent: true });\n\n// initialize\nconst app = express();\n\n// enable/disable cross origin resource sharing if necessary\napp.use(cors());\n\n// enable/disable http request logging\napp.use(morgan('dev'));\n\n// enable only if you want templating\napp.set('view engine', 'ejs');\n\n// enable only if you want static assets from folder static\napp.use(express.static('static'));\n\n// this just allows us to render ejs from the ../app/views directory\napp.set('views', path.join(__dirname, '../src/views'));\n\n// enable json message body for posting data to API\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n// additional init stuff should go before hitting the routing\n\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\n// this should go AFTER body parser\n// app.use('/api', apiRouter);\n\napp.get('/api/hello-world', async (req, res) => {\n    const docRef = db.collection('tests').doc('alovelace');\n\n    await docRef.set({\n        first: 'Ada',\n        last: 'Lovelace',\n        born: 1815\n    });\n    return res.status(200).send('Hello World!');\n});\n\nconst PersonalityInsightsV3 = require('ibm-watson/personality-insights/v3');\nconst { IamAuthenticator } = require('ibm-watson/auth');\n\nconst personalityInsights = new PersonalityInsightsV3({\n    version: '2017-10-13',\n    authenticator: new IamAuthenticator({\n      apikey: process.env.IBMKEY,\n    }),\n    serviceUrl: 'https://api.us-east.personality-insights.watson.cloud.ibm.com/instances/e243b357-33f5-45ec-a2e3-a4fdabccd55c',\n  });\n\n\nfunction calculate_similarity(user, candidate, num) {\n    let per = 0;\n    for (i = 0; i < num; i++) {\n        per += Math.min(user[i].raw_score, candidate[i].raw_score)/Math.max(user[i].raw_score, candidate[i].raw_score);\n    }\n    return (per / num)\n}\n\n\napp.put('/api/text-recommendations/', async (req, res) => {\n        // get user profile from ibm\n        const userProfileParams = {\n            // req.body.userText\n            content: req.body.userText,\n            contentType: 'text/plain;charset=utf-8',\n            consumptionPreferences: true,\n            rawScores: true,\n        };\n        let user_profile = await personalityInsights.profile(userProfileParams);\n    \n        // for each election in elections\n        // console.log(req.body.elections);\n        const elections = req.body.elections;\n        for (election of elections) {\n            // eslint-disable-next-line consistent-return\n                try {\n                    let candidate_profiles = [];\n                    // try and get candidates' profiles from election\n                            for (candidate of election.candidates) {\n                                let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream — the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\"\n                                const candidateProfileParams = {\n                                    content: candidate_content,\n                                    contentType: 'text/plain;charset=utf-8',\n                                    consumptionPreferences: true,\n                                    rawScores: true,\n                                };\n\n                                profile = await personalityInsights.profile(candidateProfileParams);\n                                // add profile to candidate json\n                                candidate[\"profile\"] = profile;\n                                // add profile to candidate profiles for store in firebase\n                                candidate_profiles.push(profile);\n                                // calculate needs_score and values_score with user_profile\n                                const needs_score = calculate_similarity(user_profile.result.needs, candidate.profile.result.needs, 12);\n                                const values_score = calculate_similarity(user_profile.result.values, candidate.profile.result.values, 5);\n                                candidate.profile[\"needs_score\"] = needs_score;\n                                candidate.profile[\"values_score\"] = values_score;\n                                // take average and add to candidate.profile under \"average_score\"\n                                candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n                            }\n                        } catch (error) {\n                            console.log(error);\n                            return res.status(500).send(error);\n                        } \n            }\n            // return elections\n            return res.status(200).send({elections});\n        });\n\n        app.put('/api/slide-recommendations/', async (req, res) => {\n            const user_profile = req.body.user;\n            const elections = req.body.elections;\n\n            for (election of elections) {\n                // eslint-disable-next-line consistent-return                 \n                        let candidate_profiles =[];\n                        // if candidates' profiles from election not stored in firebase\n                            try {\n                                for (candidate of election.candidates) {\n                                    let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream — the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\"\n                                    const candidateProfileParams = {\n                                        content: candidate_content,\n                                        contentType: 'text/plain;charset=utf-8',\n                                        consumptionPreferences: true,\n                                        rawScores: true,\n                                    };\n    \n                                    profile = await personalityInsights.profile(candidateProfileParams);\n                                    // add profile to candidate json\n                                    candidate[\"profile\"] = profile;\n                                    // add profile to candidate profiles for store in firebase\n                                    candidate_profiles.push(profile);\n                                    // calculate needs_score and values_score with user_profile\n                                    const needs_score = calculate_similarity(user_profile.needs, candidate.profile.result.needs, 12);\n                                    const values_score = calculate_similarity(user_profile.values, candidate.profile.result.values, 5);\n                                    candidate.profile[\"needs_score\"] = needs_score;\n                                    candidate.profile[\"values_score\"] = values_score;\n                                    // take average and add to candidate.profile under \"average_score\"\n                                    candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n                                }\n                            } catch (error) {\n                                console.log(error);\n                                return res.status(500).send(error);\n                            } \n                }\n                // return elections\n                return res.status(200).send({elections});\n            });\n\n\n// START THE SERVER\n// =============================================================================\nconst port = process.env.PORT || 8081;\napp.listen(port);\n\nconsole.log(`listening on: ${port}`);"
      ]
    },
    "sourceType": "module",
    "mtime": 1601834861192
  },
  "{\"sourceRoot\":\"/Users/sathvika/Desktop/api-ivyhacks/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/sathvika/Desktop/api-ivyhacks\",\"filename\":\"/Users/sathvika/Desktop/api-ivyhacks/src/server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/sathvika/Desktop/api-ivyhacks\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/sathvika/Desktop/api-ivyhacks/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/sathvika/Desktop/api-ivyhacks",
      "filename": "/Users/sathvika/Desktop/api-ivyhacks/src/server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/sathvika/Desktop/api-ivyhacks",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/sathvika/Desktop/api-ivyhacks/src/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/sathvika/Desktop/api-ivyhacks/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/sathvika/Desktop/api-ivyhacks/src/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "// import apiRouter from './router';\nconst express = require('express');\n\nconst cors = require('cors');\n\nconst morgan = require('morgan');\n\nconst path = require('path');\n\nconst bodyParser = require('body-parser');\n\nconst dotenv = require('dotenv');\n\ndotenv.config({\n  silent: true\n}); // initialize\n\nconst app = express();\n\nconst admin = require('firebase-admin');\n\nconst serviceAccount = require('../permissions.json');\n\nconst Apify = require('apify');\n\nApify.client.setOptions({\n  token: 'HPHxehsbm8m2t4iEvWpu8sFeJ'\n});\n\nconst axios = require('axios');\n\nlet data = '';\nconst config = {\n  method: 'get',\n  url: 'https://api.apify.com/v2/acts/pocesar~facebook-pages-scraper/runs/last/dataset/items?token=HPHxehsbm8m2t4iEvWpu8sFeJ\\n',\n  headers: {\n    Cookie: 'AWSALB=CJFq9Ff621KPwyrNjrbVdikBoCaXzEvywP4PU+TEED2YEJEufiqiHIJAhSUBW2ms67c1AebTxKBUC07L49dZ7HKeF4wersmImyHNVpMN6MrtIYQc5iEteMxFCd1r; AWSALBCORS=CJFq9Ff621KPwyrNjrbVdikBoCaXzEvywP4PU+TEED2YEJEufiqiHIJAhSUBW2ms67c1AebTxKBUC07L49dZ7HKeF4wersmImyHNVpMN6MrtIYQc5iEteMxFCd1r'\n  },\n  data\n};\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount)\n});\nconst db = admin.firestore(); // enable/disable cross origin resource sharing if necessary\n\napp.use(cors()); // enable/disable http request logging\n\napp.use(morgan('dev')); // enable only if you want templating\n\napp.set('view engine', 'ejs'); // enable only if you want static assets from folder static\n\napp.use(express.static('static')); // this just allows us to render ejs from the ../app/views directory\n\napp.set('views', path.join(__dirname, '../src/views')); // enable json message body for posting data to API\n\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json()); // additional init stuff should go before hitting the routing\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\n// this should go AFTER body parser\n// app.use('/api', apiRouter);\n\napp.get('/api/hello-world', async (req, res) => {\n  const docRef = db.collection('tests').doc('alovelace');\n  await docRef.set({\n    first: 'Ada',\n    last: 'Lovelace',\n    born: 1815\n  });\n  return res.status(200).send('Hello World!');\n});\n\nconst PersonalityInsightsV3 = require('ibm-watson/personality-insights/v3');\n\nconst {\n  IamAuthenticator\n} = require('ibm-watson/auth');\n\nconst personalityInsights = new PersonalityInsightsV3({\n  version: '2017-10-13',\n  authenticator: new IamAuthenticator({\n    apikey: process.env.IBMKEY\n  }),\n  serviceUrl: 'https://api.us-east.personality-insights.watson.cloud.ibm.com/instances/e243b357-33f5-45ec-a2e3-a4fdabccd55c'\n});\n\nfunction calculate_similarity(user, candidate, num) {\n  let per = 0;\n\n  for (i = 0; i < num; i++) {\n    per += Math.min(user[i].raw_score, candidate[i].raw_score) / Math.max(user[i].raw_score, candidate[i].raw_score);\n  }\n\n  return per / num;\n}\n\napp.put('/api/text-recommendations/', async (req, res) => {\n  // get user profile from ibm\n  const userProfileParams = {\n    // req.body.userText\n    content: req.body.userText,\n    contentType: 'text/plain;charset=utf-8',\n    consumptionPreferences: true,\n    rawScores: true\n  };\n  let user_profile = await personalityInsights.profile(userProfileParams); // for each election in elections\n  // console.log(req.body.elections);\n\n  const elections = req.body.elections;\n\n  for (election of elections) {\n    // eslint-disable-next-line consistent-return\n    try {\n      // string parse input for election_id\n      const election_id = election.candidates[0].name + election.district.name;\n      let candidate_profiles = []; // try and get candidates' profiles from election\n\n      for (candidate of election.candidates) {\n        let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream — the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\";\n        const candidateProfileParams = {\n          content: candidate_content,\n          contentType: 'text/plain;charset=utf-8',\n          consumptionPreferences: true,\n          rawScores: true\n        };\n        profile = await personalityInsights.profile(candidateProfileParams); // add profile to candidate json\n\n        candidate[\"profile\"] = profile; // add profile to candidate profiles for store in firebase\n\n        candidate_profiles.push(profile); // calculate needs_score and values_score with user_profile\n\n        const needs_score = calculate_similarity(user_profile.result.needs, candidate.profile.result.needs, 12);\n        const values_score = calculate_similarity(user_profile.result.values, candidate.profile.result.values, 5);\n        candidate.profile[\"needs_score\"] = needs_score;\n        candidate.profile[\"values_score\"] = values_score; // take average and add to candidate.profile under \"average_score\"\n\n        candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n      }\n    } catch (error) {\n      console.log(error);\n      return res.status(500).send(error);\n    }\n  } // return elections\n\n\n  return res.status(200).send({\n    elections\n  });\n});\napp.put('/api/slide-recommendations/', async (req, res) => {\n  const user_profile = req.body.user; // for each election in elections\n  // console.log(req.body.elections);\n\n  const elections = req.body.elections;\n\n  for (election of elections) {\n    // eslint-disable-next-line consistent-return\n    try {\n      // string parse input for election_id\n      const election_id = election.candidates[0].name + election.district.name; // try and get candidates' profiles from election\n\n      const document = db.collection('elections').doc(election_id);\n      let item = await document.get();\n      let candidate_profiles = []; // if candidates' profiles from election not stored in firebase\n\n      if (!item.exists) {\n        try {\n          for (candidate of election.candidates) {\n            let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream — the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\";\n            const candidateProfileParams = {\n              content: candidate_content,\n              contentType: 'text/plain;charset=utf-8',\n              consumptionPreferences: true,\n              rawScores: true\n            };\n            profile = await personalityInsights.profile(candidateProfileParams); // add profile to candidate json\n\n            candidate[\"profile\"] = profile; // add profile to candidate profiles for store in firebase\n\n            candidate_profiles.push(profile); // calculate needs_score and values_score with user_profile\n\n            const needs_score = calculate_similarity(user_profile.needs, candidate.profile.result.needs, 12);\n            const values_score = calculate_similarity(user_profile.values, candidate.profile.result.values, 5);\n            candidate.profile[\"needs_score\"] = needs_score;\n            candidate.profile[\"values_score\"] = values_score; // take average and add to candidate.profile under \"average_score\"\n\n            candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n          } // create elections entry in firebase\n\n\n          console.log(\"candidate_profiles\", candidate_profiles);\n          await db.collection('elections').doc('/' + election_id + '/').create({\n            election: candidate_profiles\n          });\n        } catch (error) {\n          console.log(error);\n          return res.status(500).send(error);\n        } // if candidates' profiles already stored in firebase\n\n      } else {\n        // response = {election: candidate_profiles}\n        let response = item.data();\n        let candidate_profiles = response.election;\n\n        for (candidate_profile of candidate_profiles) {\n          // calculate needs_score and values_score with user_profile\n          const needs_score = calculate_similarity(user_profile.needs, candidate.profile.result.needs, 12);\n          const values_score = calculate_similarity(user_profile.values, candidate.profile.result.values, 5);\n          candidate_profile[\"needs_score\"] = needs_score;\n          candidate_profile[\"values_score\"] = values_score; // take average and add to candidate.profile under \"average_score\"\n\n          candidate_profile[\"average_score\"] = (needs_score + values_score) / 2; // add profile to candidate json\n\n          candidate[\"profile\"] = candidate_profile;\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      return res.status(500).send(error);\n    }\n\n    ;\n  } // return elections\n\n\n  return res.status(200).send({\n    elections\n  });\n}); // START THE SERVER\n// =============================================================================\n\nconst port = process.env.PORT || 8081;\napp.listen(port);\nconsole.log(`listening on: ${port}`);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "require",
        "cors",
        "morgan",
        "path",
        "bodyParser",
        "dotenv",
        "config",
        "silent",
        "app",
        "admin",
        "serviceAccount",
        "Apify",
        "client",
        "setOptions",
        "token",
        "axios",
        "data",
        "method",
        "url",
        "headers",
        "Cookie",
        "initializeApp",
        "credential",
        "cert",
        "db",
        "firestore",
        "use",
        "set",
        "static",
        "join",
        "__dirname",
        "urlencoded",
        "extended",
        "json",
        "get",
        "req",
        "res",
        "docRef",
        "collection",
        "doc",
        "first",
        "last",
        "born",
        "status",
        "send",
        "PersonalityInsightsV3",
        "IamAuthenticator",
        "personalityInsights",
        "version",
        "authenticator",
        "apikey",
        "process",
        "env",
        "IBMKEY",
        "serviceUrl",
        "calculate_similarity",
        "user",
        "candidate",
        "num",
        "per",
        "i",
        "Math",
        "min",
        "raw_score",
        "max",
        "put",
        "userProfileParams",
        "content",
        "body",
        "userText",
        "contentType",
        "consumptionPreferences",
        "rawScores",
        "user_profile",
        "profile",
        "elections",
        "election",
        "election_id",
        "candidates",
        "name",
        "district",
        "candidate_profiles",
        "candidate_content",
        "candidateProfileParams",
        "push",
        "needs_score",
        "result",
        "needs",
        "values_score",
        "values",
        "error",
        "console",
        "log",
        "document",
        "item",
        "exists",
        "create",
        "response",
        "candidate_profile",
        "port",
        "PORT",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/sathvika/Desktop/api-ivyhacks/src/",
      "sourcesContent": [
        "// import apiRouter from './router';\nconst express = require('express');\nconst cors = require('cors');\nconst morgan = require('morgan');\nconst path = require('path');\nconst bodyParser = require('body-parser');\n\nconst dotenv = require('dotenv');\ndotenv.config({ silent: true });\n\n// initialize\nconst app = express();\n\nconst admin = require('firebase-admin');\n\nconst serviceAccount = require('../permissions.json');\n\nconst Apify = require('apify');\n\nApify.client.setOptions({ token: 'HPHxehsbm8m2t4iEvWpu8sFeJ' });\n\nconst axios = require('axios');\n\nlet data = '';\n\nconst config = {\n  method: 'get',\n  url: 'https://api.apify.com/v2/acts/pocesar~facebook-pages-scraper/runs/last/dataset/items?token=HPHxehsbm8m2t4iEvWpu8sFeJ\\n',\n  headers: {\n    Cookie: 'AWSALB=CJFq9Ff621KPwyrNjrbVdikBoCaXzEvywP4PU+TEED2YEJEufiqiHIJAhSUBW2ms67c1AebTxKBUC07L49dZ7HKeF4wersmImyHNVpMN6MrtIYQc5iEteMxFCd1r; AWSALBCORS=CJFq9Ff621KPwyrNjrbVdikBoCaXzEvywP4PU+TEED2YEJEufiqiHIJAhSUBW2ms67c1AebTxKBUC07L49dZ7HKeF4wersmImyHNVpMN6MrtIYQc5iEteMxFCd1r',\n  },\n  data,\n};\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount)\n});\n\nconst db = admin.firestore();\n\n// enable/disable cross origin resource sharing if necessary\napp.use(cors());\n\n// enable/disable http request logging\napp.use(morgan('dev'));\n\n// enable only if you want templating\napp.set('view engine', 'ejs');\n\n// enable only if you want static assets from folder static\napp.use(express.static('static'));\n\n// this just allows us to render ejs from the ../app/views directory\napp.set('views', path.join(__dirname, '../src/views'));\n\n// enable json message body for posting data to API\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n// additional init stuff should go before hitting the routing\n\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\n// this should go AFTER body parser\n// app.use('/api', apiRouter);\n\napp.get('/api/hello-world', async (req, res) => {\n    const docRef = db.collection('tests').doc('alovelace');\n\n    await docRef.set({\n        first: 'Ada',\n        last: 'Lovelace',\n        born: 1815\n    });\n    return res.status(200).send('Hello World!');\n});\n\nconst PersonalityInsightsV3 = require('ibm-watson/personality-insights/v3');\nconst { IamAuthenticator } = require('ibm-watson/auth');\n\nconst personalityInsights = new PersonalityInsightsV3({\n    version: '2017-10-13',\n    authenticator: new IamAuthenticator({\n      apikey: process.env.IBMKEY,\n    }),\n    serviceUrl: 'https://api.us-east.personality-insights.watson.cloud.ibm.com/instances/e243b357-33f5-45ec-a2e3-a4fdabccd55c',\n  });\n\n\nfunction calculate_similarity(user, candidate, num) {\n    let per = 0;\n    for (i = 0; i < num; i++) {\n        per += Math.min(user[i].raw_score, candidate[i].raw_score)/Math.max(user[i].raw_score, candidate[i].raw_score);\n    }\n    return (per / num)\n}\n\n\napp.put('/api/text-recommendations/', async (req, res) => {\n\n        // get user profile from ibm\n        const userProfileParams = {\n            // req.body.userText\n            content: req.body.userText,\n            contentType: 'text/plain;charset=utf-8',\n            consumptionPreferences: true,\n            rawScores: true,\n        };\n        let user_profile = await personalityInsights.profile(userProfileParams);\n    \n        // for each election in elections\n        // console.log(req.body.elections);\n        const elections = req.body.elections;\n        for (election of elections) {\n            // eslint-disable-next-line consistent-return\n                try {\n                    // string parse input for election_id\n                    const election_id = election.candidates[0].name + election.district.name;\n                    let candidate_profiles = []\n                    // try and get candidates' profiles from election\n                            for (candidate of election.candidates) {\n                                let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream — the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\"\n                                const candidateProfileParams = {\n                                    content: candidate_content,\n                                    contentType: 'text/plain;charset=utf-8',\n                                    consumptionPreferences: true,\n                                    rawScores: true,\n                                };\n\n                                profile = await personalityInsights.profile(candidateProfileParams);\n                                // add profile to candidate json\n                                candidate[\"profile\"] = profile;\n                                // add profile to candidate profiles for store in firebase\n                                candidate_profiles.push(profile);\n                                // calculate needs_score and values_score with user_profile\n                                const needs_score = calculate_similarity(user_profile.result.needs, candidate.profile.result.needs, 12);\n                                const values_score = calculate_similarity(user_profile.result.values, candidate.profile.result.values, 5);\n                                candidate.profile[\"needs_score\"] = needs_score;\n                                candidate.profile[\"values_score\"] = values_score;\n                                // take average and add to candidate.profile under \"average_score\"\n                                candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n                            }\n                        } catch (error) {\n                            console.log(error);\n                            return res.status(500).send(error);\n                        } \n            }\n            // return elections\n            return res.status(200).send({elections});\n        });\n\n        app.put('/api/slide-recommendations/', async (req, res) => {\n            const user_profile = req.body.user;\n            // for each election in elections\n            // console.log(req.body.elections);\n            const elections = req.body.elections;\n            for (election of elections) {\n                // eslint-disable-next-line consistent-return\n                    try {\n                        // string parse input for election_id\n                        const election_id = election.candidates[0].name + election.district.name;\n        \n                        // try and get candidates' profiles from election\n                        const document = db.collection('elections').doc(election_id);\n                        let item = await document.get();\n                        let candidate_profiles =[];\n                        // if candidates' profiles from election not stored in firebase\n                        if (!item.exists){\n                            try {\n                                for (candidate of election.candidates) {\n                                    let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream — the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\"\n                                    const candidateProfileParams = {\n                                        content: candidate_content,\n                                        contentType: 'text/plain;charset=utf-8',\n                                        consumptionPreferences: true,\n                                        rawScores: true,\n                                    };\n    \n                                    profile = await personalityInsights.profile(candidateProfileParams);\n                                    // add profile to candidate json\n                                    candidate[\"profile\"] = profile;\n                                    // add profile to candidate profiles for store in firebase\n                                    candidate_profiles.push(profile);\n                                    // calculate needs_score and values_score with user_profile\n                                    const needs_score = calculate_similarity(user_profile.needs, candidate.profile.result.needs, 12);\n                                    const values_score = calculate_similarity(user_profile.values, candidate.profile.result.values, 5);\n                                    candidate.profile[\"needs_score\"] = needs_score;\n                                    candidate.profile[\"values_score\"] = values_score;\n                                    // take average and add to candidate.profile under \"average_score\"\n                                    candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n                                }\n                                // create elections entry in firebase\n                                console.log(\"candidate_profiles\", candidate_profiles);\n                                await db.collection('elections').doc('/' + election_id + '/')\n                                    .create({election: candidate_profiles});\n                            } catch (error) {\n                                console.log(error);\n                                return res.status(500).send(error);\n                            } \n                        // if candidates' profiles already stored in firebase\n                        } else {\n                            // response = {election: candidate_profiles}\n                            let response = item.data();\n                            let candidate_profiles = response.election;\n                            for (candidate_profile of candidate_profiles) {\n                                // calculate needs_score and values_score with user_profile\n                                const needs_score = calculate_similarity(user_profile.needs, candidate.profile.result.needs, 12);\n                                const values_score = calculate_similarity(user_profile.values, candidate.profile.result.values, 5);\n                                candidate_profile[\"needs_score\"] = needs_score;\n                                candidate_profile[\"values_score\"] = values_score;\n                                // take average and add to candidate.profile under \"average_score\"\n                                candidate_profile[\"average_score\"] = (needs_score + values_score) / 2;\n                                // add profile to candidate json\n                                candidate[\"profile\"] = candidate_profile;\n                            }\n                        }\n                    } catch (error) {\n                        console.log(error);\n                        return res.status(500).send(error);\n                    };\n                }\n                // return elections\n                return res.status(200).send({elections});\n            });\n\n\n// START THE SERVER\n// =============================================================================\nconst port = process.env.PORT || 8081;\napp.listen(port);\n\nconsole.log(`listening on: ${port}`);"
      ]
    },
    "sourceType": "module",
    "mtime": 1601834060342
  }
}