{
  "{\"sourceRoot\":\"/home/jtsanz/api-ivyhacks/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/jtsanz/api-ivyhacks\",\"filename\":\"/home/jtsanz/api-ivyhacks/src/server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/jtsanz/api-ivyhacks\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/jtsanz/api-ivyhacks/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/jtsanz/api-ivyhacks",
      "filename": "/home/jtsanz/api-ivyhacks/src/server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/jtsanz/api-ivyhacks",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/jtsanz/api-ivyhacks/src/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/jtsanz/api-ivyhacks/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/jtsanz/api-ivyhacks/src/",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "// import apiRouter from './router';\nconst express = require('express');\n\nconst cors = require('cors');\n\nconst morgan = require('morgan');\n\nconst path = require('path');\n\nconst bodyParser = require('body-parser');\n\nconst dotenv = require('dotenv');\n\ndotenv.config({\n  silent: true\n}); // initialize\n\nconst app = express();\n\nconst admin = require('firebase-admin');\n\nconst serviceAccount = require('../permissions.json');\n\nconst Apify = require('apify');\n\nApify.client.setOptions({\n  token: 'HPHxehsbm8m2t4iEvWpu8sFeJ'\n});\n\nconst axios = require('axios');\n\nlet data = '';\nconst config = {\n  method: 'get',\n  url: 'https://api.apify.com/v2/acts/pocesar~facebook-pages-scraper/runs/last/dataset/items?token=HPHxehsbm8m2t4iEvWpu8sFeJ\\n',\n  headers: {\n    Cookie: 'AWSALB=CJFq9Ff621KPwyrNjrbVdikBoCaXzEvywP4PU+TEED2YEJEufiqiHIJAhSUBW2ms67c1AebTxKBUC07L49dZ7HKeF4wersmImyHNVpMN6MrtIYQc5iEteMxFCd1r; AWSALBCORS=CJFq9Ff621KPwyrNjrbVdikBoCaXzEvywP4PU+TEED2YEJEufiqiHIJAhSUBW2ms67c1AebTxKBUC07L49dZ7HKeF4wersmImyHNVpMN6MrtIYQc5iEteMxFCd1r'\n  },\n  data\n};\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount)\n});\nconst db = admin.firestore(); // enable/disable cross origin resource sharing if necessary\n\napp.use(cors()); // enable/disable http request logging\n\napp.use(morgan('dev')); // enable only if you want templating\n\napp.set('view engine', 'ejs'); // enable only if you want static assets from folder static\n\napp.use(express.static('static')); // this just allows us to render ejs from the ../app/views directory\n\napp.set('views', path.join(__dirname, '../src/views')); // enable json message body for posting data to API\n\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json()); // additional init stuff should go before hitting the routing\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\n// this should go AFTER body parser\n// app.use('/api', apiRouter);\n\napp.get('/api/hello-world', async (req, res) => {\n  const docRef = db.collection('tests').doc('alovelace');\n  await docRef.set({\n    first: 'Ada',\n    last: 'Lovelace',\n    born: 1815\n  });\n  return res.status(200).send('Hello World!');\n});\n\nconst PersonalityInsightsV3 = require('ibm-watson/personality-insights/v3');\n\nconst {\n  IamAuthenticator\n} = require('ibm-watson/auth');\n\nconst personalityInsights = new PersonalityInsightsV3({\n  version: '2017-10-13',\n  authenticator: new IamAuthenticator({\n    apikey: process.env.IBMKEY\n  }),\n  serviceUrl: 'https://api.us-east.personality-insights.watson.cloud.ibm.com/instances/e243b357-33f5-45ec-a2e3-a4fdabccd55c'\n});\n\nfunction calculate_similarity(user, candidate, num) {\n  let per = 0;\n\n  for (i = 0; i < num; i++) {\n    per += Math.min(user[i].raw_score, candidate[i].raw_score) / Math.max(user[i].raw_score, candidate[i].raw_score);\n  }\n\n  return per / num;\n} // returns election profiles if election exists, else makes and returns profiles\n// put call because need to add req.body and return\n// req.body = {elections: [candidates: [{url, name, channels=[{type(Facebook), id(url)}]}]], userText: \"user_input\"}\n// returns {candidates = [{profile={avg score, value score, needs score, other info from ibm}, ^^above}]\n\n\napp.put('/api/text-recommendations/', async (req, res) => {\n  // get user profile from ibm\n  const userProfileParams = {\n    // req.body.userText\n    content: \"returns election profiles if election exists, else makes and returns profiles returns election profiles if election exists, else makes and returns profiles Hi y'all! I'm Catherine and I'm from the great state of Texas. When I'm not in class you'll find me carefully curating Spotify playlists, exploring the Upper Valley with friends, or finding ways to enjoy the great outdoors through different sub-clubs with the DOC. I am the Treasurer of the club lacrosse team, a tutor for the Institute for Writing and Rhetoric, and am involved with research in machine learning and computational humanities through Sophomore and Neukom scholars!\",\n    contentType: 'text/plain;charset=utf-8',\n    consumptionPreferences: true,\n    rawScores: true\n  };\n  let user_profile = {}; // get candidate profile from ibm\n\n  personalityInsights.profile(userProfileParams).then(profile => {\n    // save user profile\n    user_profile = profile;\n  }).catch(err => {\n    console.log('error:', err);\n  }); // for each election in elections\n  // console.log(req.body.elections);\n\n  const elections = req.body.elections;\n\n  for (election of elections) {\n    // eslint-disable-next-line consistent-return\n    try {\n      // string parse input for election_id\n      const election_id = election.candidates[0].name + election.district.name; // try and get candidates' profiles from election\n\n      const document = db.collection('elections').doc(election_id);\n      let item = await document.get();\n      let candidate_profiles = []; // if candidates' profiles from election not stored in firebase\n\n      if (!item.exists) {\n        try {\n          for (candidate of election.candidates) {\n            // if has a facebook url (typically stored at index 0)\n            if (candidate.channels[0].type == \"Facebook\") {\n              const fburl = candidate.channels[0].id;\n              Apify.main(async () => {\n                console.log('hello currently scraping');\n                const run = await Apify.call('pocesar/facebook-pages-scraper', {\n                  startUrls: [{\n                    url: fburl\n                  }],\n                  language: 'en-US',\n                  maxPosts: 10,\n                  maxPostDate: '2019-01-01',\n                  maxPostComments: 0,\n                  maxCommentDate: '2020-01-01',\n                  maxReviews: 0,\n                  maxReviewDate: '2020-01-01',\n                  proxyConfiguration: {\n                    useApifyProxy: true\n                  }\n                });\n                console.log('scraping finished, here is the output:');\n                console.dir(run);\n              });\n            }\n\n            let candidate_content = \"\";\n            axios(config).then(response => {\n              data = JSON.stringify(response.data);\n              const obj = JSON.parse(data)[0].posts; // console.log(obj);\n\n              for (const each in obj) {\n                if (each) {\n                  candidate_content += obj[each].postText;\n                }\n              }\n\n              console.log(candidate_content);\n            }).catch(error => {\n              console.log(error);\n            }); // let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream â€” the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\"\n\n            const candidateProfileParams = {\n              content: candidate_content,\n              contentType: 'text/plain;charset=utf-8',\n              consumptionPreferences: true,\n              rawScores: true\n            }; // get candidate profile from ibm\n\n            personalityInsights.profile(candidateProfileParams).then(profile => {\n              // add profile to candidate json\n              candidate[\"profile\"] = profile; // add profile to candidate profiles for store in firebase\n\n              candidate_profiles.push(profile); // calculate needs_score and values_score with user_profile\n\n              const needs_score = calculate_similarity(user_profile.result.needs, candidate.profile.result.needs, 12);\n              const values_score = calculate_similarity(user_profile.result.values, candidate.profile.result.values, 5);\n              candidate.profile[\"needs_score\"] = needs_score;\n              candidate.profile[\"values_score\"] = values_score; // take average and add to candidate.profile under \"average_score\"\n\n              candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n            }).catch(err => {\n              console.log('error:', err);\n            }); // }\n            // // if candidate does not have a url\n            // else {\n            //     const profile = {\n            //         needs_score: 0,\n            //         values_score: 0,\n            //         average_score: 0,\n            //     };\n            //     candidate[\"profile\"] = profile;\n            // }\n          }\n\n          console.log(candidate_profiles); // create elections entry in firebase\n\n          console.log(\"candidate_profiles\", candidate_profiles);\n          await db.collection('elections').doc('/' + election_id + '/').create({\n            election: candidate_profiles\n          });\n        } catch (error) {\n          console.log(error);\n          return res.status(500).send(error);\n        } // if candidates' profiles already stored in firebase\n\n      } else {\n        // response = {election: candidate_profiles}\n        let response = item.data();\n        let candidate_profiles = response.election;\n\n        for (candidate_profile of candidate_profiles) {\n          // calculate needs_score and values_score with user_profile\n          const needs_score = calculate_similarity(user_profile.result.needs, candidate.profile.result.needs, 12);\n          const values_score = calculate_similarity(user_profile.result.values, candidate.profile.result.values, 5);\n          candidate_profile[\"needs_score\"] = needs_score;\n          candidate_profile[\"values_score\"] = values_score; // take average and add to candidate.profile under \"average_score\"\n\n          candidate_profile[\"average_score\"] = (needs_score + values_score) / 2; // add profile to candidate json\n\n          candidate[\"profile\"] = candidate_profile;\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      return res.status(500).send(error);\n    }\n\n    ;\n  } // return elections\n\n\n  return res.status(200).send({\n    elections\n  });\n});\napp.put('/api/slide-recommendations/', async (req, res) => {\n  // for each election in elections\n  // console.log(req.body.elections);\n  const elections = req.body.elections;\n\n  for (election of elections) {\n    // eslint-disable-next-line consistent-return\n    try {\n      // string parse input for election_id\n      const election_id = election.candidates[0].name + election.district.name; // try and get candidates' profiles from election\n\n      const document = db.collection('elections').doc(election_id);\n      let item = await document.get();\n      let candidate_profiles = []; // if candidates' profiles from election not stored in firebase\n\n      if (!item.exists) {\n        try {\n          for (candidate of election.candidates) {\n            // if has a facebook url (typically stored at index 0)\n            if (candidate.channels[0].type == \"Facebook\") {\n              const fburl = candidate.channels[0].id;\n              Apify.main(async () => {\n                console.log('hello currently scraping');\n                const run = await Apify.call('pocesar/facebook-pages-scraper', {\n                  startUrls: [{\n                    url: fburl\n                  }],\n                  language: 'en-US',\n                  maxPosts: 10,\n                  maxPostDate: '2019-01-01',\n                  maxPostComments: 0,\n                  maxCommentDate: '2020-01-01',\n                  maxReviews: 0,\n                  maxReviewDate: '2020-01-01',\n                  proxyConfiguration: {\n                    useApifyProxy: true\n                  }\n                });\n                console.log('scraping finished, here is the output:');\n                console.dir(run);\n              });\n            }\n\n            let candidate_content = \"\";\n            axios(config).then(response => {\n              data = JSON.stringify(response.data);\n              const obj = JSON.parse(data)[0].posts; // console.log(obj);\n\n              for (const each in obj) {\n                if (each) {\n                  candidate_content += obj[each].postText;\n                }\n              }\n\n              console.log(candidate_content);\n            }).catch(error => {\n              console.log(error);\n            }); // let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream â€” the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\"\n\n            const candidateProfileParams = {\n              content: candidate_content,\n              contentType: 'text/plain;charset=utf-8',\n              consumptionPreferences: true,\n              rawScores: true\n            }; // get candidate profile from ibm\n\n            personalityInsights.profile(candidateProfileParams).then(profile => {\n              // add profile to candidate json\n              candidate[\"profile\"] = profile; // add profile to candidate profiles for store in firebase\n\n              candidate_profiles.push(profile);\n              const user_profile = req.body.user; // calculate needs_score and values_score with user_profile\n\n              const needs_score = calculate_similarity(user_profile.needs, candidate.profile.result.needs, 12);\n              const values_score = calculate_similarity(user_profile.values, candidate.profile.result.values, 5);\n              candidate.profile[\"needs_score\"] = needs_score;\n              candidate.profile[\"values_score\"] = values_score; // take average and add to candidate.profile under \"average_score\"\n\n              candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n              console.log(candidate.profile);\n            }).catch(err => {\n              console.log('error:', err);\n            }); // }\n            // // if candidate does not have a url\n            // else {\n            //     const profile = {\n            //         needs_score: 0,\n            //         values_score: 0,\n            //         average_score: 0,\n            //     };\n            //     candidate[\"profile\"] = profile;\n            // }\n          } // create elections entry in firebase\n\n\n          console.log(\"candidate_profiles\", candidate_profiles);\n          await db.collection('elections').doc('/' + election_id + '/').create({\n            election: candidate_profiles\n          });\n        } catch (error) {\n          console.log(error);\n          return res.status(500).send(error);\n        } // if candidates' profiles already stored in firebase\n\n      } else {\n        // response = {election: candidate_profiles}\n        let response = item.data();\n        let candidate_profiles = response.election;\n\n        for (candidate_profile of candidate_profiles) {\n          // calculate needs_score and values_score with user_profile\n          const needs_score = calculate_similarity(user_profile.needs, candidate.profile.result.needs, 12);\n          const values_score = calculate_similarity(user_profile.values, candidate.profile.result.values, 5);\n          candidate_profile[\"needs_score\"] = needs_score;\n          candidate_profile[\"values_score\"] = values_score; // take average and add to candidate.profile under \"average_score\"\n\n          candidate_profile[\"average_score\"] = (needs_score + values_score) / 2; // add profile to candidate json\n\n          candidate[\"profile\"] = candidate_profile;\n          console.log(candidate);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      return res.status(500).send(error);\n    }\n\n    ;\n  } // return elections\n\n\n  console.log({\n    elections\n  });\n  return res.status(200).send({\n    elections\n  });\n}); // START THE SERVER\n// =============================================================================\n\nconst port = process.env.PORT || 8081;\napp.listen(port);\nconsole.log(`listening on: ${port}`);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "require",
        "cors",
        "morgan",
        "path",
        "bodyParser",
        "dotenv",
        "config",
        "silent",
        "app",
        "admin",
        "serviceAccount",
        "Apify",
        "client",
        "setOptions",
        "token",
        "axios",
        "data",
        "method",
        "url",
        "headers",
        "Cookie",
        "initializeApp",
        "credential",
        "cert",
        "db",
        "firestore",
        "use",
        "set",
        "static",
        "join",
        "__dirname",
        "urlencoded",
        "extended",
        "json",
        "get",
        "req",
        "res",
        "docRef",
        "collection",
        "doc",
        "first",
        "last",
        "born",
        "status",
        "send",
        "PersonalityInsightsV3",
        "IamAuthenticator",
        "personalityInsights",
        "version",
        "authenticator",
        "apikey",
        "process",
        "env",
        "IBMKEY",
        "serviceUrl",
        "calculate_similarity",
        "user",
        "candidate",
        "num",
        "per",
        "i",
        "Math",
        "min",
        "raw_score",
        "max",
        "put",
        "userProfileParams",
        "content",
        "contentType",
        "consumptionPreferences",
        "rawScores",
        "user_profile",
        "profile",
        "then",
        "catch",
        "err",
        "console",
        "log",
        "elections",
        "body",
        "election",
        "election_id",
        "candidates",
        "name",
        "district",
        "document",
        "item",
        "candidate_profiles",
        "exists",
        "channels",
        "type",
        "fburl",
        "id",
        "main",
        "run",
        "call",
        "startUrls",
        "language",
        "maxPosts",
        "maxPostDate",
        "maxPostComments",
        "maxCommentDate",
        "maxReviews",
        "maxReviewDate",
        "proxyConfiguration",
        "useApifyProxy",
        "dir",
        "candidate_content",
        "response",
        "JSON",
        "stringify",
        "obj",
        "parse",
        "posts",
        "each",
        "postText",
        "error",
        "candidateProfileParams",
        "push",
        "needs_score",
        "result",
        "needs",
        "values_score",
        "values",
        "create",
        "candidate_profile",
        "port",
        "PORT",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "/home/jtsanz/api-ivyhacks/src/",
      "sourcesContent": [
        "// import apiRouter from './router';\nconst express = require('express');\nconst cors = require('cors');\nconst morgan = require('morgan');\nconst path = require('path');\nconst bodyParser = require('body-parser');\n\nconst dotenv = require('dotenv');\ndotenv.config({ silent: true });\n\n// initialize\nconst app = express();\n\nconst admin = require('firebase-admin');\n\nconst serviceAccount = require('../permissions.json');\n\nconst Apify = require('apify');\n\nApify.client.setOptions({ token: 'HPHxehsbm8m2t4iEvWpu8sFeJ' });\n\nconst axios = require('axios');\n\nlet data = '';\n\nconst config = {\n    method: 'get',\n    url: 'https://api.apify.com/v2/acts/pocesar~facebook-pages-scraper/runs/last/dataset/items?token=HPHxehsbm8m2t4iEvWpu8sFeJ\\n',\n    headers: {\n        Cookie: 'AWSALB=CJFq9Ff621KPwyrNjrbVdikBoCaXzEvywP4PU+TEED2YEJEufiqiHIJAhSUBW2ms67c1AebTxKBUC07L49dZ7HKeF4wersmImyHNVpMN6MrtIYQc5iEteMxFCd1r; AWSALBCORS=CJFq9Ff621KPwyrNjrbVdikBoCaXzEvywP4PU+TEED2YEJEufiqiHIJAhSUBW2ms67c1AebTxKBUC07L49dZ7HKeF4wersmImyHNVpMN6MrtIYQc5iEteMxFCd1r',\n    },\n    data,\n};\n\nadmin.initializeApp({\n    credential: admin.credential.cert(serviceAccount)\n});\n\nconst db = admin.firestore();\n\n// enable/disable cross origin resource sharing if necessary\napp.use(cors());\n\n// enable/disable http request logging\napp.use(morgan('dev'));\n\n// enable only if you want templating\napp.set('view engine', 'ejs');\n\n// enable only if you want static assets from folder static\napp.use(express.static('static'));\n\n// this just allows us to render ejs from the ../app/views directory\napp.set('views', path.join(__dirname, '../src/views'));\n\n// enable json message body for posting data to API\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n// additional init stuff should go before hitting the routing\n\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\n// this should go AFTER body parser\n// app.use('/api', apiRouter);\n\napp.get('/api/hello-world', async (req, res) => {\n    const docRef = db.collection('tests').doc('alovelace');\n\n    await docRef.set({\n        first: 'Ada',\n        last: 'Lovelace',\n        born: 1815\n    });\n    return res.status(200).send('Hello World!');\n});\n\nconst PersonalityInsightsV3 = require('ibm-watson/personality-insights/v3');\nconst { IamAuthenticator } = require('ibm-watson/auth');\n\nconst personalityInsights = new PersonalityInsightsV3({\n    version: '2017-10-13',\n    authenticator: new IamAuthenticator({\n        apikey: process.env.IBMKEY,\n    }),\n    serviceUrl: 'https://api.us-east.personality-insights.watson.cloud.ibm.com/instances/e243b357-33f5-45ec-a2e3-a4fdabccd55c',\n});\n\n\nfunction calculate_similarity(user, candidate, num) {\n    let per = 0;\n    for (i = 0; i < num; i++) {\n        per += Math.min(user[i].raw_score, candidate[i].raw_score) / Math.max(user[i].raw_score, candidate[i].raw_score);\n    }\n    return (per / num)\n}\n\n// returns election profiles if election exists, else makes and returns profiles\n// put call because need to add req.body and return\n// req.body = {elections: [candidates: [{url, name, channels=[{type(Facebook), id(url)}]}]], userText: \"user_input\"}\n// returns {candidates = [{profile={avg score, value score, needs score, other info from ibm}, ^^above}]\napp.put('/api/text-recommendations/', async (req, res) => {\n\n    // get user profile from ibm\n    const userProfileParams = {\n        // req.body.userText\n        content: \"returns election profiles if election exists, else makes and returns profiles returns election profiles if election exists, else makes and returns profiles Hi y'all! I'm Catherine and I'm from the great state of Texas. When I'm not in class you'll find me carefully curating Spotify playlists, exploring the Upper Valley with friends, or finding ways to enjoy the great outdoors through different sub-clubs with the DOC. I am the Treasurer of the club lacrosse team, a tutor for the Institute for Writing and Rhetoric, and am involved with research in machine learning and computational humanities through Sophomore and Neukom scholars!\",\n        contentType: 'text/plain;charset=utf-8',\n        consumptionPreferences: true,\n        rawScores: true,\n    };\n    let user_profile = {};\n    // get candidate profile from ibm\n    personalityInsights.profile(userProfileParams)\n        .then(profile => {\n            // save user profile\n            user_profile = profile;\n        })\n        .catch(err => {\n            console.log('error:', err);\n        });\n\n    // for each election in elections\n    // console.log(req.body.elections);\n    const elections = req.body.elections;\n    for (election of elections) {\n        // eslint-disable-next-line consistent-return\n        try {\n            // string parse input for election_id\n            const election_id = election.candidates[0].name + election.district.name;\n\n            // try and get candidates' profiles from election\n            const document = db.collection('elections').doc(election_id);\n            let item = await document.get();\n            let candidate_profiles = [];\n            // if candidates' profiles from election not stored in firebase\n            if (!item.exists) {\n                try {\n                    for (candidate of election.candidates) {\n                        // if has a facebook url (typically stored at index 0)\n                        if (candidate.channels[0].type == \"Facebook\") {\n                            const fburl = candidate.channels[0].id;\n                            Apify.main(async () => {\n                                console.log('hello currently scraping');\n                                const run = await Apify.call('pocesar/facebook-pages-scraper', {\n                                    startUrls: [\n                                        {\n                                            url: fburl,\n                                        },\n                                    ],\n                                    language: 'en-US',\n                                    maxPosts: 10,\n                                    maxPostDate: '2019-01-01',\n                                    maxPostComments: 0,\n                                    maxCommentDate: '2020-01-01',\n                                    maxReviews: 0,\n                                    maxReviewDate: '2020-01-01',\n                                    proxyConfiguration: {\n                                        useApifyProxy: true,\n                                    },\n                                });\n                                console.log('scraping finished, here is the output:');\n                                console.dir(run);\n                            });\n                        }\n                        let candidate_content = \"\";\n                        axios(config)\n                            .then((response) => {\n                                data = JSON.stringify(response.data);\n                                const obj = JSON.parse(data)[0].posts;\n                                // console.log(obj);\n                                for (const each in obj) {\n                                    if (each) {\n                                        candidate_content += obj[each].postText;\n                                    }\n                                }\n                                console.log(candidate_content)\n                            })\n                            .catch((error) => {\n                                console.log(error);\n                            });\n\n                        // let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream â€” the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\"\n                        const candidateProfileParams = {\n                            content: candidate_content,\n                            contentType: 'text/plain;charset=utf-8',\n                            consumptionPreferences: true,\n                            rawScores: true,\n                        };\n                        // get candidate profile from ibm\n                        personalityInsights.profile(candidateProfileParams)\n                            .then(profile => {\n                                // add profile to candidate json\n                                candidate[\"profile\"] = profile;\n                                // add profile to candidate profiles for store in firebase\n                                candidate_profiles.push(profile);\n                                // calculate needs_score and values_score with user_profile\n                                const needs_score = calculate_similarity(user_profile.result.needs, candidate.profile.result.needs, 12);\n                                const values_score = calculate_similarity(user_profile.result.values, candidate.profile.result.values, 5);\n                                candidate.profile[\"needs_score\"] = needs_score;\n                                candidate.profile[\"values_score\"] = values_score;\n                                // take average and add to candidate.profile under \"average_score\"\n                                candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n                            })\n                            .catch(err => {\n                                console.log('error:', err);\n                            });\n                        // }\n                        // // if candidate does not have a url\n                        // else {\n                        //     const profile = {\n                        //         needs_score: 0,\n                        //         values_score: 0,\n                        //         average_score: 0,\n                        //     };\n                        //     candidate[\"profile\"] = profile;\n                        // }\n                    }\n                    console.log(candidate_profiles);\n                    // create elections entry in firebase\n                    console.log(\"candidate_profiles\", candidate_profiles);\n                    await db.collection('elections').doc('/' + election_id + '/')\n                        .create({ election: candidate_profiles });\n                } catch (error) {\n                    console.log(error);\n                    return res.status(500).send(error);\n                }\n                // if candidates' profiles already stored in firebase\n            } else {\n                // response = {election: candidate_profiles}\n                let response = item.data();\n                let candidate_profiles = response.election;\n                for (candidate_profile of candidate_profiles) {\n                    // calculate needs_score and values_score with user_profile\n                    const needs_score = calculate_similarity(user_profile.result.needs, candidate.profile.result.needs, 12);\n                    const values_score = calculate_similarity(user_profile.result.values, candidate.profile.result.values, 5);\n                    candidate_profile[\"needs_score\"] = needs_score;\n                    candidate_profile[\"values_score\"] = values_score;\n                    // take average and add to candidate.profile under \"average_score\"\n                    candidate_profile[\"average_score\"] = (needs_score + values_score) / 2;\n                    // add profile to candidate json\n                    candidate[\"profile\"] = candidate_profile;\n                }\n            }\n        } catch (error) {\n            console.log(error);\n            return res.status(500).send(error);\n        };\n    }\n    // return elections\n    return res.status(200).send({ elections });\n});\n\napp.put('/api/slide-recommendations/', async (req, res) => {\n\n    // for each election in elections\n    // console.log(req.body.elections);\n    const elections = req.body.elections;\n    for (election of elections) {\n        // eslint-disable-next-line consistent-return\n        try {\n            // string parse input for election_id\n            const election_id = election.candidates[0].name + election.district.name;\n\n            // try and get candidates' profiles from election\n            const document = db.collection('elections').doc(election_id);\n            let item = await document.get();\n            let candidate_profiles = [];\n\n            // if candidates' profiles from election not stored in firebase\n            if (!item.exists) {\n                try {\n                    for (candidate of election.candidates) {\n                        // if has a facebook url (typically stored at index 0)\n                        if (candidate.channels[0].type == \"Facebook\") {\n                            const fburl = candidate.channels[0].id;\n                            Apify.main(async () => {\n                                console.log('hello currently scraping');\n                                const run = await Apify.call('pocesar/facebook-pages-scraper', {\n                                    startUrls: [\n                                        {\n                                            url: fburl,\n                                        },\n                                    ],\n                                    language: 'en-US',\n                                    maxPosts: 10,\n                                    maxPostDate: '2019-01-01',\n                                    maxPostComments: 0,\n                                    maxCommentDate: '2020-01-01',\n                                    maxReviews: 0,\n                                    maxReviewDate: '2020-01-01',\n                                    proxyConfiguration: {\n                                        useApifyProxy: true,\n                                    },\n                                });\n                                console.log('scraping finished, here is the output:');\n                                console.dir(run);\n                            });\n                        }\n                        let candidate_content = \"\";\n                        axios(config)\n                            .then((response) => {\n                                data = JSON.stringify(response.data);\n                                const obj = JSON.parse(data)[0].posts;\n                                // console.log(obj);\n                                for (const each in obj) {\n                                    if (each) {\n                                        candidate_content += obj[each].postText;\n                                    }\n                                }\n                                console.log(candidate_content)\n                            })\n                            .catch((error) => {\n                                console.log(error);\n                            });\n\n                        // let candidate_content = \"Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, Ted, his wife Heidi, their two daughters Caroline and Catherine, and his entire family have been blessed to live the American Dream â€” the idea that anyone, through hard work and determination, can achieve anything. And he is committed to ensuring every family has that same opportunity.\"\n                        const candidateProfileParams = {\n                            content: candidate_content,\n                            contentType: 'text/plain;charset=utf-8',\n                            consumptionPreferences: true,\n                            rawScores: true,\n                        };\n                        // get candidate profile from ibm\n                        personalityInsights.profile(candidateProfileParams)\n                            .then(profile => {\n                                // add profile to candidate json\n                                candidate[\"profile\"] = profile;\n                                // add profile to candidate profiles for store in firebase\n                                candidate_profiles.push(profile);\n                                const user_profile = req.body.user;\n                                // calculate needs_score and values_score with user_profile\n                                const needs_score = calculate_similarity(user_profile.needs, candidate.profile.result.needs, 12);\n                                const values_score = calculate_similarity(user_profile.values, candidate.profile.result.values, 5);\n                                candidate.profile[\"needs_score\"] = needs_score;\n                                candidate.profile[\"values_score\"] = values_score;\n                                // take average and add to candidate.profile under \"average_score\"\n                                candidate.profile[\"average_score\"] = (needs_score + values_score) / 2;\n                                console.log(candidate.profile);\n                            })\n                            .catch(err => {\n                                console.log('error:', err);\n                            });\n                        // }\n                        // // if candidate does not have a url\n                        // else {\n                        //     const profile = {\n                        //         needs_score: 0,\n                        //         values_score: 0,\n                        //         average_score: 0,\n                        //     };\n                        //     candidate[\"profile\"] = profile;\n                        // }\n                    }\n                    // create elections entry in firebase\n                    console.log(\"candidate_profiles\", candidate_profiles);\n                    await db.collection('elections').doc('/' + election_id + '/')\n                        .create({ election: candidate_profiles });\n                } catch (error) {\n                    console.log(error);\n                    return res.status(500).send(error);\n                }\n                // if candidates' profiles already stored in firebase\n            } else {\n                // response = {election: candidate_profiles}\n                let response = item.data();\n                let candidate_profiles = response.election;\n                for (candidate_profile of candidate_profiles) {\n                    // calculate needs_score and values_score with user_profile\n                    const needs_score = calculate_similarity(user_profile.needs, candidate.profile.result.needs, 12);\n                    const values_score = calculate_similarity(user_profile.values, candidate.profile.result.values, 5);\n                    candidate_profile[\"needs_score\"] = needs_score;\n                    candidate_profile[\"values_score\"] = values_score;\n                    // take average and add to candidate.profile under \"average_score\"\n                    candidate_profile[\"average_score\"] = (needs_score + values_score) / 2;\n                    // add profile to candidate json\n                    candidate[\"profile\"] = candidate_profile;\n                    console.log(candidate);\n                }\n            }\n        } catch (error) {\n            console.log(error);\n            return res.status(500).send(error);\n        };\n    }\n    // return elections\n    console.log({ elections });\n    return res.status(200).send({ elections });\n});\n\n\n// START THE SERVER\n// =============================================================================\nconst port = process.env.PORT || 8081;\napp.listen(port);\n\nconsole.log(`listening on: ${port}`);"
      ]
    },
    "sourceType": "module",
    "mtime": 1601798648087
  }
}